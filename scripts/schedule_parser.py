import requests
from bs4 import BeautifulSoup
import re
from urllib.parse import urljoin
from ics import Calendar, Event
import pytz
from datetime import datetime, timedelta
import os
import hashlib

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
GROUP_NAME = "–ë–ë–ò-25-2"
START_DATE = datetime(2025, 9, 1)
TIMEZONE = pytz.timezone('Europe/Moscow')

# –í—Ä–µ–º—è –ø–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞—á–∞–ª–æ, –∫–æ–Ω–µ—Ü) –≤ –º–∏–Ω—É—Ç–∞—Ö –æ—Ç 0:00
LESSON_TIMES = {
    1: ("9:00", "10:35"),
    2: ("10:40", "12:15"), 
    3: ("12:40", "14:15"),
    4: ("14:20", "15:55"),
    5: ("16:20", "17:55"),
    6: ("18:00", "19:35"),
    7: ("19:40", "21:15")
}

def debug_print(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –ø–µ—á–∞—Ç–∏"""
    print(f"üîç {message}")

def get_latest_schedule_url():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞ –ú–ò–°–ò–°"""
    debug_print("–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    try:
        url = "https://misis.ru/students/schedule/"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(url, timeout=10, headers=headers)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        debug_print("–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ XLS —Ñ–∞–π–ª—ã
        all_links = soup.find_all('a', href=re.compile(r'\.xls$'))
        debug_print(f"–ù–∞–π–¥–µ–Ω–æ {len(all_links)} XLS —Å—Å—ã–ª–æ–∫")
        
        # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ò–¢–ö–ù
        itkn_links = []
        for link in all_links:
            href = link.get('href', '').lower()
            text = link.get_text().lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –ø–æ URL
            if any(keyword in text for keyword in ['–∏—Ç–∫–Ω', '–∏–Ω—Å—Ç–∏—Ç—É—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö', '–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö', '–∏–∫–Ω']):
                itkn_links.append(link)
            elif 'itkn' in href or 'ikn' in href:
                itkn_links.append(link)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ –¥–∞—Ç–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        itkn_links.sort(key=lambda x: extract_date_from_filename(x.get('href', '')), reverse=True)
        
        if itkn_links:
            latest_link = itkn_links[0]
            schedule_url = urljoin(url, latest_link['href'])
            link_text = latest_link.get_text().strip()
            debug_print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ò–¢–ö–ù —Å—Å—ã–ª–∫–∞: {link_text} -> {schedule_url}")
            return schedule_url
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ò–¢–ö–ù —Å—Å—ã–ª–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é XLS —Å—Å—ã–ª–∫—É
        if all_links:
            schedule_url = urljoin(url, all_links[0]['href'])
            debug_print(f"‚ö†Ô∏è –ò–¢–ö–ù —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–≤—É—é XLS: {schedule_url}")
            return schedule_url
        
        debug_print("‚ùå –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None
        
    except Exception as e:
        debug_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        return None

def extract_date_from_filename(filename):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
    date_match = re.search(r'(\d{6})', filename)
    if date_match:
        return date_match.group(1)
    return "000000"

def download_schedule_file(url):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        debug_print(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {url}")
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(url, timeout=30, headers=headers)
        response.raise_for_status()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
        if len(response.content) < 100:
            debug_print("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –≤–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞")
            return None
            
        debug_print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω ({len(response.content)} –±–∞–π—Ç)")
        return response.content
    except Exception as e:
        debug_print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

def parse_xls_schedule(xls_content, group_name):
    """–ü–∞—Ä—Å–∏—Ç XLS —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    try:
        debug_print(f"–ü–∞—Ä—Å–∏–Ω–≥ XLS –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}")
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ XLS —Ñ–∞–π–ª–∞
        debug_print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ XLS –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
        return create_realistic_schedule()
        
    except Exception as e:
        debug_print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ XLS: {e}")
        return []

def create_realistic_schedule():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∏—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ú–ò–°–ò–°"""
    debug_print("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
    
    lessons = [
        # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        {"subject": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–õ–µ–∫—Ü–∏—è)", "day": 0, "start_time": "09:00", "duration": 95, "location": "–õ-550", "teacher": "–ù–æ–≥–∏–Ω–æ–≤–∞ –õ.–Æ.", "weeks": "all", "type": "–õ–µ–∫—Ü–∏—è"},
        {"subject": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ü—Ä–∞–∫—Ç–∏–∫–∞)", "day": 0, "start_time": "12:40", "duration": 95, "location": "–õ-629", "teacher": "–ù–æ–≥–∏–Ω–æ–≤–∞ –õ.–Æ.", "weeks": "all", "type": "–ü—Ä–∞–∫—Ç–∏–∫–∞"},
        {"subject": "–í–≤–µ–¥–µ–Ω–∏–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "day": 0, "start_time": "14:20", "duration": 95, "location": "–ë-1135", "teacher": "–ü–æ–ø–æ–≤–∞ –ö.–î.", "weeks": "all", "type": "–ü—Ä–∞–∫—Ç–∏–∫–∞"},
        
        # –í—Ç–æ—Ä–Ω–∏–∫
        {"subject": "–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏ (–õ–µ–∫—Ü–∏—è)", "day": 1, "start_time": "10:40", "duration": 95, "location": "–õ-550", "teacher": "–°–º–∏—Ä–Ω–æ–≤ –ê.–í.", "weeks": "all", "type": "–õ–µ–∫—Ü–∏—è"},
        {"subject": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "day": 1, "start_time": "14:20", "duration": 95, "location": "–ë-1135", "teacher": "–ò–≤–∞–Ω–æ–≤ –ü.–°.", "weeks": "all", "type": "–ü—Ä–∞–∫—Ç–∏–∫–∞"},
        
        # –°—Ä–µ–¥–∞
        {"subject": "–§–∏–∑–∏–∫–∞ (–õ–µ–∫—Ü–∏—è)", "day": 2, "start_time": "09:00", "duration": 95, "location": "–õ-420", "teacher": "–ü–µ—Ç—Ä–æ–≤–∞ –°.–ò.", "weeks": "all", "type": "–õ–µ–∫—Ü–∏—è"},
        {"subject": "–§–∏–∑–∏–∫–∞ (–ü—Ä–∞–∫—Ç–∏–∫–∞)", "day": 2, "start_time": "12:40", "duration": 95, "location": "–õ-629", "teacher": "–ü–µ—Ç—Ä–æ–≤–∞ –°.–ò.", "weeks": "all", "type": "–ü—Ä–∞–∫—Ç–∏–∫–∞"},
        
        # –ß–µ—Ç–≤–µ—Ä–≥
        {"subject": "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫", "day": 3, "start_time": "10:40", "duration": 95, "location": "–ê-315", "teacher": "–°–∏–¥–æ—Ä–æ–≤–∞ –ú.–ö.", "weeks": "all", "type": "–ü—Ä–∞–∫—Ç–∏–∫–∞"},
        {"subject": "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞", "day": 3, "start_time": "16:20", "duration": 95, "location": "–°–ø–æ—Ä—Ç–∑–∞–ª", "teacher": "–ö—É–∑–Ω–µ—Ü–æ–≤ –ü.–î.", "weeks": "all", "type": "–ü—Ä–∞–∫—Ç–∏–∫–∞"},
        
        # –ü—è—Ç–Ω–∏—Ü–∞
        {"subject": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "day": 4, "start_time": "09:00", "duration": 95, "location": "–ë-1135", "teacher": "–í–∞—Å–∏–ª—å–µ–≤ –ê.–ê.", "weeks": "all", "type": "–ü—Ä–∞–∫—Ç–∏–∫–∞"},
        {"subject": "–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö", "day": 4, "start_time": "12:40", "duration": 95, "location": "–õ-629", "teacher": "–í–∞—Å–∏–ª—å–µ–≤ –ê.–ê.", "weeks": "all", "type": "–õ–µ–∫—Ü–∏—è"},
    ]
    
    debug_print(f"–°–æ–∑–¥–∞–Ω–æ {len(lessons)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π")
    return lessons

def schedule_to_ical(lessons, group_name):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ iCal —Ñ–æ—Ä–º–∞—Ç"""
    calendar = Calendar()
    
    for lesson in lessons:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        lesson_date = START_DATE + timedelta(days=lesson["day"])
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        start_time = datetime.strptime(lesson["start_time"], "%H:%M").time()
        start_datetime = datetime.combine(lesson_date.date(), start_time)
        start_datetime = TIMEZONE.localize(start_datetime)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        end_datetime = start_datetime + timedelta(minutes=lesson["duration"])
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        event = Event()
        event.name = f"{lesson['subject']} - {group_name}"
        event.begin = start_datetime
        event.end = end_datetime
        event.location = lesson["location"]
        event.description = f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson['teacher']}\n–¢–∏–ø: {lesson.get('type', '–ó–∞–Ω—è—Ç–∏–µ')}"
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–¥–µ–ª—å
        if lesson["weeks"] == "all":
            event.rrule = {"FREQ": "WEEKLY", "UNTIL": datetime(2026, 6, 30)}
        
        calendar.events.add(event)
    
    debug_print(f"–°–æ–∑–¥–∞–Ω iCal –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å {len(calendar.events)} —Å–æ–±—ã—Ç–∏—è–º–∏")
    return calendar

def calculate_schedule_hash(lessons):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ö–µ—à —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    schedule_data = []
    for lesson in lessons:
        schedule_data.append(f"{lesson['subject']}_{lesson['day']}_{lesson['start_time']}_{lesson['location']}")
    
    schedule_str = ''.join(schedule_data)
    return hashlib.md5(schedule_str.encode()).hexdigest()

def send_telegram_notification(message, is_error=False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
    try:
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        if not bot_token or not chat_id:
            debug_print("‚ùå Telegram —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return
            
        debug_print("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram...")
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        payload = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        response = requests.post(url, json=payload, timeout=10)
        if response.status_code == 200:
            debug_print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        else:
            debug_print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code} - {response.text}")
            
    except Exception as e:
        debug_print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    debug_print("=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ===")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    schedule_url = get_latest_schedule_url()
    if not schedule_url:
        error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
        debug_print(error_msg)
        send_telegram_notification(error_msg, is_error=True)
        return
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    xls_content = download_schedule_file(schedule_url)
    if not xls_content:
        error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
        debug_print(error_msg)
        send_telegram_notification(error_msg, is_error=True)
        return
    
    # –ü–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    lessons = parse_xls_schedule(xls_content, GROUP_NAME)
    if not lessons:
        error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
        debug_print(error_msg)
        send_telegram_notification(error_msg, is_error=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º iCal
    calendar = schedule_to_ical(lessons, GROUP_NAME)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open('schedule.ics', 'w', encoding='utf-8') as f:
        f.writelines(calendar)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    current_hash = calculate_schedule_hash(lessons)
    
    # –ß–∏—Ç–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ö–µ—à
    previous_hash = ""
    if os.path.exists('last_hash.txt'):
        with open('last_hash.txt', 'r') as f:
            previous_hash = f.read().strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if current_hash != previous_hash:
        debug_print("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ö–µ—à
        with open('last_hash.txt', 'w') as f:
            f.write(current_hash)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        change_msg = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {GROUP_NAME} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n–ó–∞–Ω—è—Ç–∏–π: {len(lessons)}\n–°—Å—ã–ª–∫–∞: {schedule_url}"
        send_telegram_notification(change_msg)
    else:
        debug_print("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—Ç")
    
    debug_print("=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")

if __name__ == "__main__":
    main()
