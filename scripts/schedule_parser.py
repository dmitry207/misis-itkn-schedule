import requests
from bs4 import BeautifulSoup
import re
from urllib.parse import urljoin
import openpyxl
from io import BytesIO
from ics import Calendar, Event
import pytz
from datetime import datetime, timedelta
import os
import telegram
import hashlib

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
GROUP_NAME = "–ë–ë–ò-25-2"
START_DATE = datetime(2025, 9, 1)
TIMEZONE = pytz.timezone('Europe/Moscow')

def debug_print(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –ø–µ—á–∞—Ç–∏"""
    print(f"üîç {message}")

def get_latest_schedule_url():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞ –ú–ò–°–ò–°"""
    debug_print("–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    try:
        url = "https://misis.ru/students/schedule/"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        debug_print("–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ò—â–µ–º –±–ª–æ–∫ —Å –ò–Ω—Å—Ç–∏—Ç—É—Ç–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫
        itkn_blocks = soup.find_all(string=re.compile(r'–ò–Ω—Å—Ç–∏—Ç—É—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫', re.IGNORECASE))
        
        for block in itkn_blocks:
            parent = block.find_parent()
            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ XLS —Ñ–∞–π–ª—ã –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ
            xls_links = parent.find_all('a', href=re.compile(r'\.xls$'))
            
            if xls_links:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é (–ø–æ—Å–ª–µ–¥–Ω—é—é) —Å—Å—ã–ª–∫—É
                xls_link = xls_links[0]
                schedule_url = urljoin(url, xls_link['href'])
                debug_print(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {schedule_url}")
                return schedule_url
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
        debug_print("–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫, –∏—Å–ø–æ–ª—å–∑—É—é —Ç–µ—Å—Ç–æ–≤—É—é")
        test_url = "https://misis.ru/files/-/d316e628c9cd38657184fa33d8f5f5ea/itkn-250909.xls"
        return test_url
        
    except Exception as e:
        debug_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        test_url = "https://misis.ru/files/-/d316e628c9cd38657184fa33d8f5f5ea/itkn-250909.xls"
        return test_url

def download_schedule_file(url):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        debug_print(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {url}")
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        debug_print("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω")
        return response.content
    except Exception as e:
        debug_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

def parse_xls_schedule(xls_content, group_name):
    """–ü–∞—Ä—Å–∏—Ç XLS —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    debug_print(f"–ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã: {group_name}")
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º Excel —Ñ–∞–π–ª –∏–∑ –ø–∞–º—è—Ç–∏
        workbook = openpyxl.load_workbook(BytesIO(xls_content))
        sheet = workbook.active
        
        schedule_data = []
        debug_print("XLS —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–ª–æ–∂–µ–Ω
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ XLS —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        
        test_lessons = [
            {
                'subject': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ)',
                'day': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                'time_slot': '09:00:00 - 10:35:00',
                'location': '–õ-550',
                'teacher': '–ù–æ–≥–∏–Ω–æ–≤–∞ –õ. –Æ.',
                'week_parity': 'both'
            },
            {
                'subject': '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏ (–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ)',
                'day': '–í—Ç–æ—Ä–Ω–∏–∫',
                'time_slot': '10:50:00 - 12:25:00',
                'location': '–õ-746',
                'teacher': '–ë—É–ª–∞—Ç–æ–≤ –ò. –ê.',
                'week_parity': 'both'
            },
            {
                'subject': '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞',
                'day': '–°—Ä–µ–¥–∞',
                'time_slot': '09:00:00 - 10:35:00',
                'location': '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –ì–æ—Ä–Ω–æ–≥–æ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞',
                'teacher': '',
                'week_parity': 'both'
            },
            {
                'subject': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∏–∑–∞—Ü–∏—è',
                'day': '–ß–µ—Ç–≤–µ—Ä–≥',
                'time_slot': '12:40:00 - 14:15:00',
                'location': '–õ-556',
                'teacher': '–ê–Ω–¥—Ä–µ–µ–≤–∞ –û. –í.',
                'week_parity': 'both'
            },
            {
                'subject': '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫',
                'day': '–ü—è—Ç–Ω–∏—Ü–∞',
                'time_slot': '09:00:00 - 10:35:00',
                'location': '–ö–∞—Ñ. –ò–Ø–ö–¢',
                'teacher': '',
                'week_parity': 'both'
            }
        ]
        
        schedule_data = test_lessons
        debug_print(f"–°–æ–∑–¥–∞–Ω–æ {len(schedule_data)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π")
        
        return schedule_data
        
    except Exception as e:
        debug_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ XLS: {e}")
        return []

def create_ics_schedule(schedule_data, start_date):
    """–°–æ–∑–¥–∞–µ—Ç ICS —Ñ–∞–π–ª –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    debug_print("–°–æ–∑–¥–∞–Ω–∏–µ ICS –∫–∞–ª–µ–Ω–¥–∞—Ä—è...")
    
    calendar = Calendar()
    
    # –ú–∞–ø–ø–∏–Ω–≥ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    days_mapping = {
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0,
        '–≤—Ç–æ—Ä–Ω–∏–∫': 1,
        '—Å—Ä–µ–¥–∞': 2,
        '—á–µ—Ç–≤–µ—Ä–≥': 3,
        '–ø—è—Ç–Ω–∏—Ü–∞': 4,
        '—Å—É–±–±–æ—Ç–∞': 5
    }
    
    # –ú–∞–ø–ø–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    time_slots = {
        '09:00:00 - 10:35:00': {'start': (9, 0), 'end': (10, 35)},
        '10:50:00 - 12:25:00': {'start': (10, 50), 'end': (12, 25)},
        '12:40:00 - 14:15:00': {'start': (12, 40), 'end': (14, 15)},
        '14:30:00 - 16:05:00': {'start': (14, 30), 'end': (16, 5)},
        '16:20:00 - 17:55:00': {'start': (16, 20), 'end': (17, 55)},
        '18:00:00 - 19:25:00': {'start': (18, 0), 'end': (19, 25)},
        '19:35:00 - 21:00:00': {'start': (19, 35), 'end': (21, 0)}
    }
    
    for lesson in schedule_data:
        day_name = lesson['day'].lower()
        if day_name not in days_mapping:
            continue
            
        day_offset = days_mapping[day_name]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è
        lesson_date = start_date + timedelta(days=day_offset)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è
        time_slot = lesson.get('time_slot')
        if time_slot not in time_slots:
            continue
            
        time_data = time_slots[time_slot]
        start_hour, start_minute = time_data['start']
        end_hour, end_minute = time_data['end']
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        event = Event()
        event.name = lesson['subject']
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        event.begin = TIMEZONE.localize(datetime(
            lesson_date.year, lesson_date.month, lesson_date.day,
            start_hour, start_minute
        ))
        event.end = TIMEZONE.localize(datetime(
            lesson_date.year, lesson_date.month, lesson_date.day,
            end_hour, end_minute
        ))
        
        event.location = lesson['location']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ
        description = f"–ì—Ä—É–ø–ø–∞: {GROUP_NAME}"
        if lesson.get('teacher'):
            description += f"\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson['teacher']}"
        if lesson.get('week_parity'):
            description += f"\n–ù–µ–¥–µ–ª—è: {lesson['week_parity']}"
        
        event.description = description
        
        calendar.events.add(event)
    
    debug_print(f"–°–æ–∑–¥–∞–Ω–æ {len(calendar.events)} —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ")
    return calendar

def send_telegram_notification(message, is_error=False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
    try:
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        if bot_token and chat_id:
            bot = telegram.Bot(token=bot_token)
            bot.send_message(chat_id=chat_id, text=message)
            debug_print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    except Exception as e:
        debug_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

def get_file_hash(content):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ö—ç—à —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    return hashlib.md5(content).hexdigest()

def main():
    debug_print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ú–ò–°–ò–°...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule_url = get_latest_schedule_url()
    if not schedule_url:
        error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
        debug_print(error_msg)
        send_telegram_notification(error_msg, True)
        return
    
    debug_print(f"üìé –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {schedule_url}")
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    xls_content = download_schedule_file(schedule_url)
    if not xls_content:
        error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
        debug_print(error_msg)
        send_telegram_notification(error_msg, True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª
    current_hash = get_file_hash(xls_content)
    previous_hash = None
    
    try:
        with open('last_hash.txt', 'r') as f:
            previous_hash = f.read().strip()
    except FileNotFoundError:
        debug_print("–§–∞–π–ª last_hash.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
    
    # –ü–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule_data = parse_xls_schedule(xls_content, GROUP_NAME)
    
    if not schedule_data:
        error_msg = f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {GROUP_NAME}"
        debug_print(error_msg)
        send_telegram_notification(error_msg, True)
        return
    
    # –°–æ–∑–¥–∞–µ–º ICS —Ñ–∞–π–ª
    ics_calendar = create_ics_schedule(schedule_data, START_DATE)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ICS —Ñ–∞–π–ª
    with open('schedule.ics', 'w', encoding='utf-8') as f:
        f.write(ics_calendar.serialize())
    debug_print("‚úÖ –§–∞–π–ª schedule.ics —Å–æ–∑–¥–∞–Ω")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö—ç—à —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
    with open('last_hash.txt', 'w') as f:
        f.write(current_hash)
    debug_print("‚úÖ –§–∞–π–ª last_hash.txt —Å–æ–∑–¥–∞–Ω")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    if current_hash != previous_hash:
        success_msg = f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n–ì—Ä—É–ø–ø–∞: {GROUP_NAME}\n–°—Å—ã–ª–∫–∞: {schedule_url}\n–°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(ics_calendar.events)}"
        send_telegram_notification(success_msg)
        debug_print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    else:
        debug_print("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
    
    debug_print("üéâ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main()
