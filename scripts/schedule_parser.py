import requests
from bs4 import BeautifulSoup
import re
from urllib.parse import urljoin
from ics import Calendar, Event
import pytz
from datetime import datetime, timedelta
import os
import hashlib
import pandas as pd
from io import BytesIO

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
GROUP_NAME = "–ë–ë–ò-25-2"
START_DATE = datetime(2025, 9, 1)
TIMEZONE = pytz.timezone('Europe/Moscow')

# –í—Ä–µ–º—è –ø–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞—á–∞–ª–æ, –∫–æ–Ω–µ—Ü) –≤ –º–∏–Ω—É—Ç–∞—Ö –æ—Ç 0:00
LESSON_TIMES = {
    1: ("9:00", "10:35"),
    2: ("10:40", "12:15"), 
    3: ("12:40", "14:15"),
    4: ("14:20", "15:55"),
    5: ("16:20", "17:55"),
    6: ("18:00", "19:35"),
    7: ("19:40", "21:15")
}

def debug_print(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –ø–µ—á–∞—Ç–∏"""
    print(f"üîç {message}")

def get_latest_schedule_url():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞ –ú–ò–°–ò–°"""
    debug_print("–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    try:
        url = "https://misis.ru/students/schedule/"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(url, timeout=10, headers=headers)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        debug_print("–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ò—â–µ–º –±–ª–æ–∫ "–ò–Ω—Å—Ç–∏—Ç—É—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫"
        itkn_block = None
        for element in soup.find_all(['div', 'p', 'li']):
            text = element.get_text().lower()
            if any(keyword in text for keyword in ['–∏–Ω—Å—Ç–∏—Ç—É—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫', '–∏—Ç–∫–Ω', '–∏–∫–Ω']):
                itkn_block = element
                debug_print("–ù–∞–π–¥–µ–Ω –±–ª–æ–∫ –ò–¢–ö–ù")
                break
        
        # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ XLS —Ñ–∞–π–ª—ã –≤ –±–ª–æ–∫–µ –ò–¢–ö–ù
        itkn_links = []
        if itkn_block:
            itkn_links = itkn_block.find_all('a', href=re.compile(r'\.xls$'))
            debug_print(f"–ù–∞–π–¥–µ–Ω–æ {len(itkn_links)} XLS —Å—Å—ã–ª–æ–∫ –≤ –±–ª–æ–∫–µ –ò–¢–ö–ù")
        
        # –ï—Å–ª–∏ –≤ –±–ª–æ–∫–µ –ò–¢–ö–ù –Ω–µ—Ç —Å—Å—ã–ª–æ–∫, –∏—â–µ–º –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if not itkn_links:
            debug_print("–í –±–ª–æ–∫–µ –ò–¢–ö–ù –Ω–µ—Ç —Å—Å—ã–ª–æ–∫, –∏—â—É –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            all_links = soup.find_all('a', href=re.compile(r'\.xls$'))
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            for link in all_links:
                href = link.get('href', '').lower()
                text = link.get_text().lower()
                
                if any(keyword in text for keyword in ['–∏—Ç–∫–Ω', '–∏–Ω—Å—Ç–∏—Ç—É—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö', '–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö', '–∏–∫–Ω']):
                    itkn_links.append(link)
                elif 'itkn' in href or 'ikn' in href:
                    itkn_links.append(link)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ –¥–∞—Ç–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        itkn_links.sort(key=lambda x: extract_date_from_filename(x.get('href', '')), reverse=True)
        
        if itkn_links:
            latest_link = itkn_links[0]
            schedule_url = urljoin(url, latest_link['href'])
            link_text = latest_link.get_text().strip()
            debug_print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ò–¢–ö–ù —Å—Å—ã–ª–∫–∞: {link_text} -> {schedule_url}")
            return schedule_url
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ò–¢–ö–ù —Å—Å—ã–ª–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é XLS —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        all_links = soup.find_all('a', href=re.compile(r'\.xls$'))
        if all_links:
            schedule_url = urljoin(url, all_links[0]['href'])
            debug_print(f"‚ö†Ô∏è –ò–¢–ö–ù —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–≤—É—é XLS: {schedule_url}")
            return schedule_url
        
        debug_print("‚ùå –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None
        
    except Exception as e:
        debug_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        return None

def extract_date_from_filename(filename):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
    date_match = re.search(r'(\d{6})', filename)
    if date_match:
        return date_match.group(1)
    return "000000"

def download_schedule_file(url):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        debug_print(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {url}")
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(url, timeout=30, headers=headers)
        response.raise_for_status()
        
        if len(response.content) < 100:
            debug_print("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –≤–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞")
            return None
            
        debug_print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω ({len(response.content)} –±–∞–π—Ç)")
        return response.content
    except Exception as e:
        debug_print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

def parse_xls_schedule(xls_content, group_name):
    """–ü–∞—Ä—Å–∏—Ç XLS —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    try:
        debug_print(f"–ü–∞—Ä—Å–∏–Ω–≥ XLS –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}")
        
        xls_file = BytesIO(xls_content)
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –¥–≤–∏–∂–∫–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è
        try:
            df = pd.read_excel(xls_file, engine='openpyxl', header=None)
        except:
            try:
                df = pd.read_excel(xls_file, engine='xlrd', header=None)
            except Exception as e:
                debug_print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å XLS —Ñ–∞–π–ª: {e}")
                return []
        
        debug_print(f"–§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: {df.shape}")
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (–≥–¥–µ –µ—Å—Ç—å –Ω–æ–º–µ—Ä –ø–∞—Ä—ã)
        header_row = find_header_row(df)
        if header_row is None:
            debug_print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            return []
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–æ–π
        group_col = find_group_column(df, group_name, header_row)
        if group_col is None:
            debug_print(f"‚ùå –ì—Ä—É–ø–ø–∞ {group_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ")
            return []
        
        debug_print(f"–ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ {group_col}")
        return extract_lessons_from_schedule(df, group_col, header_row)
        
    except Exception as e:
        debug_print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ XLS: {e}")
        return []

def find_header_row(df):
    """–ù–∞—Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (–Ω–æ–º–µ—Ä–∞ –ø–∞—Ä)"""
    for idx, row in df.iterrows():
        for cell in row:
            if isinstance(cell, str) and any(str(i) in str(cell) for i in range(1, 8)):
                return idx
    return None

def find_group_column(df, group_name, header_row):
    """–ù–∞—Ö–æ–¥–∏—Ç –∫–æ–ª–æ–Ω–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–æ–π"""
    # –ò—â–µ–º –≤ —Å—Ç—Ä–æ–∫–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    for row_offset in range(0, 5):
        current_row = header_row + row_offset
        if current_row >= len(df):
            break
            
        for col_idx, cell in enumerate(df.iloc[current_row]):
            if group_name in str(cell):
                return col_idx
    return None

def extract_lessons_from_schedule(df, group_col, header_row):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–Ω—è—Ç–∏—è –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    lessons = []
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Å –∑–∞–Ω—è—Ç–∏—è–º–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
    for row_idx in range(header_row + 1, len(df)):
        row = df.iloc[row_idx]
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if pd.isna(row[group_col]) or str(row[group_col]).strip() == '':
            continue
            
        lesson_info = parse_lesson_cell(str(row[group_col]))
        if lesson_info:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏
            day_of_week = (row_idx - header_row - 1) % 7
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –ø–∞—Ä—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –¥–Ω–µ
            lesson_number = (row_idx - header_row - 1) // 7 + 1
            
            if lesson_number in LESSON_TIMES:
                start_time, end_time = LESSON_TIMES[lesson_number]
                duration = calculate_duration(start_time, end_time)
                
                lesson = {
                    "subject": lesson_info["subject"],
                    "day": day_of_week,
                    "start_time": start_time,
                    "duration": duration,
                    "location": lesson_info.get("location", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                    "teacher": lesson_info.get("teacher", "–ù–µ —É–∫–∞–∑–∞–Ω"),
                    "weeks": lesson_info.get("weeks", "all"),
                    "type": lesson_info.get("type", "–ó–∞–Ω—è—Ç–∏–µ")
                }
                lessons.append(lesson)
                debug_print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–µ: {lesson['subject']} –≤ {start_time}")
    
    debug_print(f"–í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(lessons)} –∑–∞–Ω—è—Ç–∏–π")
    return lessons

def parse_lesson_cell(cell_text):
    """–ü–∞—Ä—Å–∏—Ç —è—á–µ–π–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–Ω—è—Ç–∏–∏"""
    if not cell_text or cell_text.strip() == '':
        return None
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = ' '.join(cell_text.split())
    
    # –ë–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ä–º–∞—Ç–∞ "–ü—Ä–µ–¥–º–µ—Ç –ê—É–¥–∏—Ç–æ—Ä–∏—è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
    parts = text.split()
    
    if len(parts) < 2:
        return None
    
    lesson_info = {}
    
    # –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –æ–±—ã—á–Ω–æ –ø—Ä–µ–¥–º–µ—Ç
    lesson_info["subject"] = parts[0]
    
    # –ò—â–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é (–æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
    for part in parts[1:]:
        if re.match(r'^[–ê-–Ø–∞-—èA-Za-z]-?\d+', part):
            lesson_info["location"] = part
            break
    
    # –û—Å—Ç–∞–ª—å–Ω–æ–µ - –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    teacher_parts = []
    for part in parts[1:]:
        if part != lesson_info.get("location", ""):
            teacher_parts.append(part)
    
    if teacher_parts:
        lesson_info["teacher"] = ' '.join(teacher_parts)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    subject_lower = lesson_info["subject"].lower()
    if any(word in subject_lower for word in ['–ª–µ–∫—Ü–∏—è', '–ª–µ–∫']):
        lesson_info["type"] = "–õ–µ–∫—Ü–∏—è"
    elif any(word in subject_lower for word in ['–ø—Ä–∞–∫—Ç–∏–∫–∞', '–ø—Ä']):
        lesson_info["type"] = "–ü—Ä–∞–∫—Ç–∏–∫–∞"
    elif any(word in subject_lower for word in ['–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è', '–ª–∞–±']):
        lesson_info["type"] = "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è"
    
    return lesson_info

def calculate_duration(start_time, end_time):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö"""
    start = datetime.strptime(start_time, "%H:%M")
    end = datetime.strptime(end_time, "%H:%M")
    return int((end - start).total_seconds() / 60)

def schedule_to_ical(lessons, group_name):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ iCal —Ñ–æ—Ä–º–∞—Ç"""
    calendar = Calendar()
    
    for lesson in lessons:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        lesson_date = START_DATE + timedelta(days=lesson["day"])
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        start_time = datetime.strptime(lesson["start_time"], "%H:%M").time()
        start_datetime = datetime.combine(lesson_date.date(), start_time)
        start_datetime = TIMEZONE.localize(start_datetime)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        end_datetime = start_datetime + timedelta(minutes=lesson["duration"])
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        event = Event()
        event.name = f"{lesson['subject']} ({lesson['type']}) - {group_name}"
        event.begin = start_datetime
        event.end = end_datetime
        event.location = lesson["location"]
        event.description = f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson['teacher']}\n–¢–∏–ø: {lesson['type']}"
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–¥–µ–ª—å
        if lesson["weeks"] == "all":
            event.rrule = {"FREQ": "WEEKLY", "UNTIL": datetime(2026, 6, 30)}
        
        calendar.events.add(event)
    
    return calendar

def calculate_schedule_hash(lessons):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ö–µ—à —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    schedule_data = []
    for lesson in lessons:
        schedule_data.append(f"{lesson['subject']}_{lesson['day']}_{lesson['start_time']}_{lesson['location']}")
    
    schedule_str = ''.join(schedule_data)
    return hashlib.md5(schedule_str.encode()).hexdigest()

def send_telegram_notification(message, is_error=False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
    try:
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        if not bot_token or not chat_id:
            debug_print("‚ùå Telegram —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return
            
        debug_print("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram...")
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        payload = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        response = requests.post(url, json=payload, timeout=10)
        if response.status_code == 200:
            debug_print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        else:
            debug_print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code} - {response.text}")
            
    except Exception as e:
        debug_print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    debug_print("=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ===")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    schedule_url = get_latest_schedule_url()
    if not schedule_url:
        error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
        debug_print(error_msg)
        send_telegram_notification(error_msg, is_error=True)
        return
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    xls_content = download_schedule_file(schedule_url)
    if not xls_content:
        error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
        debug_print(error_msg)
        send_telegram_notification(error_msg, is_error=True)
        return
    
    # –ü–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    lessons = parse_xls_schedule(xls_content, GROUP_NAME)
    if not lessons:
        error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
        debug_print(error_msg)
        send_telegram_notification(error_msg, is_error=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º iCal
    calendar = schedule_to_ical(lessons, GROUP_NAME)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open('schedule.ics', 'w', encoding='utf-8') as f:
        f.writelines(calendar)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    current_hash = calculate_schedule_hash(lessons)
    
    # –ß–∏—Ç–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ö–µ—à
    previous_hash = ""
    if os.path.exists('last_hash.txt'):
        with open('last_hash.txt', 'r') as f:
            previous_hash = f.read().strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if current_hash != previous_hash:
        debug_print("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ö–µ—à
        with open('last_hash.txt', 'w') as f:
            f.write(current_hash)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        change_msg = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {GROUP_NAME} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n–ó–∞–Ω—è—Ç–∏–π: {len(lessons)}\n–°—Å—ã–ª–∫–∞: {schedule_url}"
        send_telegram_notification(change_msg)
    else:
        debug_print("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—Ç")
    
    debug_print("=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")

if __name__ == "__main__":
    main()
