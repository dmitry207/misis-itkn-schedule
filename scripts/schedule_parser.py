import requests
from bs4 import BeautifulSoup
import re
from urllib.parse import urljoin
from ics import Calendar, Event
import pytz
from datetime import datetime, timedelta
import os
import hashlib
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
GROUP_NAME = "–ë–ë–ò-25-2"
START_DATE = datetime(2025, 9, 1)
TIMEZONE = pytz.timezone('Europe/Moscow')

# –í—Ä–µ–º—è –ø–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞—á–∞–ª–æ, –∫–æ–Ω–µ—Ü)
LESSON_TIMES = {
    1: ("9:00", "10:35"),
    2: ("10:40", "12:15"), 
    3: ("12:40", "14:15"),
    4: ("14:20", "15:55"),
    5: ("16:20", "17:55"),
    6: ("18:00", "19:35"),
    7: ("19:40", "21:15")
}

def debug_print(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –ø–µ—á–∞—Ç–∏"""
    print(f"üîç {message}")

def parse_xls_schedule(xls_content, group_name):
    try:
        debug_print(f"–ü–∞—Ä—Å–∏–Ω–≥ XLS –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}")
        
        import xlrd
        workbook = xlrd.open_workbook(file_contents=xls_content)
        sheet = workbook.sheet_by_index(0)
        
        debug_print(f"‚úÖ XLS —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç: {sheet.nrows} —Å—Ç—Ä–æ–∫, {sheet.ncols} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –ò—â–µ–º –≥—Ä—É–ø–ø—É
        group_col = None
        for row_idx in range(sheet.nrows):
            for col_idx in range(sheet.ncols):
                cell_value = str(sheet.cell_value(row_idx, col_idx)).strip()
                if group_name in cell_value:
                    group_col = col_idx
                    debug_print(f"‚úÖ –ì—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞: —Å—Ç—Ä–æ–∫–∞ {row_idx}, –∫–æ–ª–æ–Ω–∫–∞ {col_idx}")
                    break
            if group_col is not None:
                break
        
        if group_col is None:
            debug_print("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ")
            return []
        
        # –ò—â–µ–º –Ω–æ–º–µ—Ä–∞ –ø–∞—Ä –≤ –∫–æ–ª–æ–Ω–∫–µ 1 (–æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –ø–∞—Ä)
        lesson_numbers = []
        for row_idx in range(sheet.nrows):
            cell_value = str(sheet.cell_value(row_idx, 1)).strip()
            if cell_value.isdigit() and 1 <= int(cell_value) <= 7:
                lesson_numbers.append((row_idx, int(cell_value)))
                debug_print(f"üîç –ù–æ–º–µ—Ä –ø–∞—Ä—ã: —Å—Ç—Ä–æ–∫–∞ {row_idx} = {cell_value}")
        
        if not lesson_numbers:
            debug_print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–º–µ—Ä–∞ –ø–∞—Ä")
            return []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–Ω—è—Ç–∏—è
        lessons = []
        day_counter = 0
        lessons_per_day = 0
        
        for i, (lesson_row, lesson_number) in enumerate(lesson_numbers):
            if lesson_number in LESSON_TIMES:
                start_time, end_time = LESSON_TIMES[lesson_number]
                duration = calculate_duration(start_time, end_time)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏
                lesson_cell_value = str(sheet.cell_value(lesson_row, group_col)).strip()
                
                if lesson_cell_value and lesson_cell_value != 'nan' and lesson_cell_value != '':
                    lesson_info = parse_lesson_cell_detailed(lesson_cell_value)
                    if lesson_info and lesson_info["subject"] != "1":  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —è—á–µ–π–∫–∏ —Ç–æ–ª—å–∫–æ —Å —Ü–∏—Ñ—Ä–æ–π 1
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–æ–≤—ã–µ –ø–∞—Ä—ã —Å 1
                        if lesson_number == 1:
                            if i > 0:  # –ù–µ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å
                                day_counter += 1
                            lessons_per_day = 0
                        else:
                            lessons_per_day += 1
                        
                        lesson = {
                            "subject": lesson_info["subject"],
                            "day": day_counter,
                            "start_time": start_time,
                            "duration": duration,
                            "location": lesson_info.get("location", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                            "teacher": lesson_info.get("teacher", "–ù–µ —É–∫–∞–∑–∞–Ω"),
                            "weeks": "all",
                            "type": lesson_info.get("type", "–ó–∞–Ω—è—Ç–∏–µ")
                        }
                        lessons.append(lesson)
                        debug_print(f"‚úÖ {lesson['subject']} ({lesson['type']}) - {start_time} (–¥–µ–Ω—å {day_counter}, –ø–∞—Ä–∞ {lesson_number})")
        
        debug_print(f"‚úÖ –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(lessons)} –∑–∞–Ω—è—Ç–∏–π –∑–∞ {day_counter + 1} –¥–Ω–µ–π")
        return lessons
        
    except Exception as e:
        debug_print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ XLS: {e}")
        import traceback
        debug_print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        return []

def parse_lesson_cell_detailed(cell_text):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —è—á–µ–π–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    if not cell_text or cell_text.strip() == '' or cell_text == 'nan':
        return None
    
    text = cell_text.strip()
    debug_print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ —è—á–µ–π–∫–∏: '{text}'")
    
    lesson_info = {}
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è
    if '(–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ)' in text:
        lesson_info["type"] = "–õ–µ–∫—Ü–∏—è"
        subject = text.replace('(–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ)', '').strip()
    elif '(–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ)' in text:
        lesson_info["type"] = "–ü—Ä–∞–∫—Ç–∏–∫–∞" 
        subject = text.replace('(–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ)', '').strip()
    elif '(–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ)' in text:
        lesson_info["type"] = "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è"
        subject = text.replace('(–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ)', '').strip()
    else:
        lesson_info["type"] = "–ó–∞–Ω—è—Ç–∏–µ"
        subject = text
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    subject = subject.replace('\n', ' ')
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    parts = subject.split()
    
    # –ò—â–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–§–∞–º–∏–ª–∏—è –ò.–û."
    teacher_found = False
    for i in range(len(parts) - 1):
        if (len(parts[i]) >= 2 and 
            re.match(r'^[–ê-–Ø–Å][–∞-—è—ë]*$', parts[i]) and 
            re.match(r'^[–ê-–Ø–Å]\.[–ê-–Ø–Å]\.$', parts[i+1])):
            lesson_info["teacher"] = f"{parts[i]} {parts[i+1]}"
            lesson_info["subject"] = ' '.join(parts[:i])
            teacher_found = True
            break
    
    if not teacher_found:
        # –ï—Å–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –ø—Ä–µ–¥–º–µ—Ç
        lesson_info["subject"] = subject
        lesson_info["teacher"] = "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    # –ò—â–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é –≤ —Ç–µ–∫—Å—Ç–µ
    location_match = re.search(r'[–ê-–Ø–∞-—èA-Za-z]-?\d+[–ê-–Ø–∞-—èA-Za-z]?', text)
    if location_match:
        lesson_info["location"] = location_match.group()
    else:
        lesson_info["location"] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    return lesson_info

def calculate_duration(start_time, end_time):
    start = datetime.strptime(start_time, "%H:%M")
    end = datetime.strptime(end_time, "%H:%M")
    return int((end - start).total_seconds() / 60)

def schedule_to_ical(lessons, group_name):
    calendar = Calendar()
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    days_of_week = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    
    for lesson in lessons:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
        lesson_date = START_DATE + timedelta(days=lesson["day"])
        
        start_time = datetime.strptime(lesson["start_time"], "%H:%M").time()
        start_datetime = datetime.combine(lesson_date.date(), start_time)
        start_datetime = TIMEZONE.localize(start_datetime)
        
        end_datetime = start_datetime + timedelta(minutes=lesson["duration"])
        
        event = Event()
        event.name = f"{lesson['subject']} ({lesson['type']})"
        event.begin = start_datetime
        event.end = end_datetime
        event.location = lesson["location"]
        event.description = f"–ì—Ä—É–ø–ø–∞: {group_name}\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson['teacher']}\n–¢–∏–ø: {lesson['type']}\n–ê—É–¥–∏—Ç–æ—Ä–∏—è: {lesson['location']}"
        
        if lesson["weeks"] == "all":
            event.rrule = {"FREQ": "WEEKLY", "UNTIL": datetime(2026, 6, 30)}
        
        calendar.events.add(event)
        
        debug_print(f"üìÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {lesson['subject']} - {days_of_week[lesson['day']]} {start_time}")
    
    debug_print(f"–°–æ–∑–¥–∞–Ω iCal –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å {len(calendar.events)} —Å–æ–±—ã—Ç–∏—è–º–∏")
    return calendar

def calculate_schedule_hash(lessons):
    schedule_data = []
    for lesson in lessons:
        schedule_data.append(f"{lesson['subject']}_{lesson['day']}_{lesson['start_time']}_{lesson['location']}")
    
    schedule_str = ''.join(schedule_data)
    return hashlib.md5(schedule_str.encode()).hexdigest()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (get_latest_schedule_url, download_schedule_file, send_telegram_notification, main)

def get_latest_schedule_url():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞ –ú–ò–°–ò–°"""
    debug_print("–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    try:
        url = "https://misis.ru/students/schedule/"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(url, timeout=10, headers=headers)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        debug_print("–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ XLS —Ñ–∞–π–ª—ã
        all_links = soup.find_all('a', href=re.compile(r'\.xls$'))
        debug_print(f"–ù–∞–π–¥–µ–Ω–æ {len(all_links)} XLS —Å—Å—ã–ª–æ–∫")
        
        # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ò–¢–ö–ù
        itkn_links = []
        for link in all_links:
            href = link.get('href', '').lower()
            text = link.get_text().lower()
            
            if any(keyword in text for keyword in ['–∏—Ç–∫–Ω', '–∏–Ω—Å—Ç–∏—Ç—É—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö', '–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö', '–∏–∫–Ω']):
                itkn_links.append(link)
            elif 'itkn' in href or 'ikn' in href:
                itkn_links.append(link)
        
        itkn_links.sort(key=lambda x: extract_date_from_filename(x.get('href', '')), reverse=True)
        
        if itkn_links:
            latest_link = itkn_links[0]
            schedule_url = urljoin(url, latest_link['href'])
            link_text = latest_link.get_text().strip()
            debug_print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ò–¢–ö–ù —Å—Å—ã–ª–∫–∞: {link_text} -> {schedule_url}")
            return schedule_url
        
        if all_links:
            schedule_url = urljoin(url, all_links[0]['href'])
            debug_print(f"‚ö†Ô∏è –ò–¢–ö–ù —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–≤—É—é XLS: {schedule_url}")
            return schedule_url
        
        debug_print("‚ùå –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None
        
    except Exception as e:
        debug_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        return None

def extract_date_from_filename(filename):
    date_match = re.search(r'(\d{6})', filename)
    if date_match:
        return date_match.group(1)
    return "000000"

def download_schedule_file(url):
    try:
        debug_print(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {url}")
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(url, timeout=30, headers=headers)
        response.raise_for_status()
        
        if len(response.content) < 100:
            debug_print("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –≤–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞")
            return None
            
        debug_print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω ({len(response.content)} –±–∞–π—Ç)")
        return response.content
    except Exception as e:
        debug_print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

def send_telegram_notification(message, is_error=False):
    try:
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        if not bot_token or not chat_id:
            debug_print("‚ùå Telegram —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return
            
        debug_print("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram...")
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        payload = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        response = requests.post(url, json=payload, timeout=10)
        if response.status_code == 200:
            debug_print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        else:
            debug_print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code} - {response.text}")
            
    except Exception as e:
        debug_print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

def main():
    debug_print("=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ===")
    
    schedule_url = get_latest_schedule_url()
    if not schedule_url:
        error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
        debug_print(error_msg)
        send_telegram_notification(error_msg, is_error=True)
        return
    
    xls_content = download_schedule_file(schedule_url)
    if not xls_content:
        error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
        debug_print(error_msg)
        send_telegram_notification(error_msg, is_error=True)
        return
    
    lessons = parse_xls_schedule(xls_content, GROUP_NAME)
    if not lessons:
        error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
        debug_print(error_msg)
        send_telegram_notification(error_msg, is_error=True)
        return
    
    calendar = schedule_to_ical(lessons, GROUP_NAME)
    
    with open('schedule.ics', 'w', encoding='utf-8') as f:
        f.writelines(calendar)
    
    current_hash = calculate_schedule_hash(lessons)
    
    previous_hash = ""
    if os.path.exists('last_hash.txt'):
        with open('last_hash.txt', 'r') as f:
            previous_hash = f.read().strip()
    
    if current_hash != previous_hash:
        debug_print("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
        
        with open('last_hash.txt', 'w') as f:
            f.write(current_hash)
        
        days_count = max(lesson["day"] for lesson in lessons) + 1 if lessons else 0
        change_msg = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {GROUP_NAME} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n–ó–∞–Ω—è—Ç–∏–π: {len(lessons)}\n–î–Ω–µ–π: {days_count}\n–°—Å—ã–ª–∫–∞: {schedule_url}"
        send_telegram_notification(change_msg)
    else:
        debug_print("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—Ç")
    
    debug_print("=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")

if __name__ == "__main__":
    main()
